// schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  hashedPassword String?
  image          String?
  role           Role     @default(MEMBER)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  projects         Project[] @relation("ProjectMembers")
  managedProjects  Project[] @relation("ProjectManager")
  files            File[]

  // Sessions and accounts for authentication
  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Manager relation
  managerId String
  manager   User   @relation("ProjectManager", fields: [managerId], references: [id])

  // Project members
  members User[] @relation("ProjectMembers")

  // Other relations
  files File[]
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Sender and receiver relations
  senderId String
  sender   User   @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  receiverId String
  receiver   User   @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  // Message can have attached files
  files File[]
}

model File {
  id        String   @id @default(cuid())
  name      String
  type      String
  size      Int
  url       String
  key       String // Storage key for S3/Cloudinary
  createdAt DateTime @default(now())

  // Relations
  uploaderId String
  uploader   User   @relation(fields: [uploaderId], references: [id], onDelete: Cascade)

  // Optional relations
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  messageId String?
  message   Message? @relation(fields: [messageId], references: [id], onDelete: SetNull)
}

enum Role {
  ADMIN
  MANAGER
  MEMBER
}
